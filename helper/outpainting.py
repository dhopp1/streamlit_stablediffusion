from diffusers import AutoPipelineForInpaintingfrom diffusers.utils import load_imagefrom PIL import Image, ImageDrawimport osimport randomimport torchimport mathdef initialize_outpainting(model_name, model_path, device, torch_dtype):    "initialize the img2img model"    pipe = AutoPipelineForInpainting.from_pretrained(        model_name, torch_dtype=torch_dtype, variant="fp16"    )    pipe = pipe.to(device)    if not (os.path.isdir(model_path)):        pipe.save_pretrained(model_path)    return pipedef gen_outpainting(    pipe,    prompt,    device,    init_image_path="metadata/input_images/tmp_image.png",    image_name="output",    num_variations=1,    num_inference_steps=20,    guidance_scale=7.5,    height=512,    width=512,    manual_seeds=None,    negative_prompt="",):    "generate an image"    if manual_seeds is None:        manual_seeds = [random.randint(0, 65000) for _ in range(num_variations)]    generator = [torch.Generator(device).manual_seed(i) for i in manual_seeds]        init_image = load_image(init_image_path).convert("RGB")    #init_image = init_image.resize(size=(512,512), resample=None)        # Create a white image/canvas    mask = Image.new("RGB", (width, height), "white")    # draw a black patch on the canvas    left = math.ceil(max((width - init_image.width) / 2, 0))    top = math.ceil(max((height - init_image.height) / 2, 0))         # calculate width and height of the rectangle    right = left + init_image.size[0] - 5    bottom = top + init_image.size[1] - 5         draw = ImageDraw.Draw(mask)    draw.rectangle([left, top, right, bottom], fill="black")         input_image = mask.copy()        # Paste the input image onto the black region on the canvas    input_image.paste(init_image, (left, top))        # pipe    images = pipe(        prompt=num_variations * [prompt],        negative_prompt=num_variations * [negative_prompt],        width=width,        height=height,        num_inference_steps=num_inference_steps,        image=input_image,         mask_image=mask,        guidance_scale=guidance_scale,        strength=1.0,         generator=generator    ).images        img_paths = []    for i in range(len(images)):        img_path = f"metadata/output_images/{image_name}_seed_{manual_seeds[i]}.png"        images[i].save(img_path)        img_paths.append(img_path)    return img_paths